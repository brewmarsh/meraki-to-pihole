version: '3.8'

services:
  meraki-pihole-sync:
    build: .
    container_name: meraki-pihole-sync
    restart: unless-stopped
    image: meraki-pihole-sync:latest

    environment:
      # MERAKI_API_KEY: "YOUR_MERAKI_API_KEY_HERE" # Option 1: Directly in compose (less secure)
      # Option 2 (recommended): Use an .env file (see .env.example) or set it in your shell environment
      - MERAKI_API_KEY=${MERAKI_API_KEY}
      - PIHOLE_API_URL=${PIHOLE_API_URL} # e.g., http://pihole.local/admin/api.php or http://<PIHOLE_IP>/admin/api.php
      - PIHOLE_API_KEY=${PIHOLE_API_KEY}   # Your Pi-hole API Key (WEBPASSWORD hash or token from settings)
      - CRON_SCHEDULE=${CRON_SCHEDULE:-0 3 * * *} # Default to 3 AM daily if not set in .env
      # - TZ=America/New_York # Optional: Set timezone for cron jobs

    volumes:
      # Mount your local config directory to /config in the container
      # Create a config.ini in ./config on your host machine based on config/config.ini.sample
      - ./config_prod:/config:ro # Mounts a 'config_prod' directory from host to '/config' read-only
      # To store cron logs on the host (optional):
      # - ./logs:/var/log:rw

    # If you use an .env file, uncomment the line below
    # env_file:
    #   - .env

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Example .env file (create a file named .env in the same directory as docker-compose.yml)
#
# MERAKI_API_KEY=sk_yourmerakiapikey1234567890
# PIHOLE_API_URL=http://192.168.1.10/admin/api.php
# PIHOLE_API_KEY=yourpiholeapitokengeneratedfromsettingspage
# CRON_SCHEDULE=0 4 * * * # Run daily at 4 AM
# TZ=Europe/London
#
# Note on PIHOLE_API_KEY:
# If you have a Pi-hole password set, you need to provide the API token.
# Go to Pi-hole Admin > Settings > API / Web interface > Show API token.
# If you don't have a password, you might not need the PIHOLE_API_KEY (the script handles it being None).
# However, it's recommended to password-protect your Pi-hole and use the API token.
#
# Note on config_prod directory:
# You should create a directory named `config_prod` in the same location as this docker-compose.yml file.
# Inside `config_prod`, place your `config.ini` file.
# Example:
# ./docker-compose.yml
# ./config_prod/
#   └── config.ini
#
# Your `config.ini` should be based on `config/config.ini.sample`.
#
# To build and run:
# 1. Create your .env file with your secrets/configs.
# 2. Create your ./config_prod/config.ini file.
# 3. docker-compose build
# 4. docker-compose up -d
#
# To view logs:
# docker-compose logs -f meraki-pihole-sync
#
# To run the script manually once inside the container (for testing):
# docker-compose exec meraki-pihole-sync python meraki_pihole_sync.py --config /config/config.ini
#
# Remember to replace placeholder values in your .env and config.ini with actual credentials and settings.
#
# Security for MERAKI_API_KEY:
# Using an .env file is better than hardcoding in docker-compose.yml.
# For production, consider Docker Secrets or other secrets management tools if your environment supports them.
# The .env file should be added to .gitignore if you're using version control.
#
# Create an .env.example file to show what variables are needed:
#
# File: .env.example
#
# MERAKI_API_KEY=
# PIHOLE_API_URL=
# PIHOLE_API_KEY=
# CRON_SCHEDULE=0 3 * * * # Optional: defaults to 3 AM daily in compose file if not set
# TZ= # Optional: e.g., America/New_York
#
#
# The script itself expects MERAKI_API_KEY from the environment.
# Pi-hole details and Meraki org/network info are in config.ini (mounted via volume).
# Cron schedule is also passed via environment variable to the entrypoint script.
#
# The current docker-compose.yml structure assumes you create a local directory
# named `config_prod` and place your `config.ini` there.
# This is then mounted into the container at `/config/config.ini`.
#
# The `image` tag `meraki-pihole-sync:latest` is set. `docker-compose build` will build it.
# `restart: unless-stopped` ensures the container restarts if it crashes or on Docker daemon restart.
#
# Logging is configured to rotate logs to prevent them from growing indefinitely.
#
# Timezone (TZ) environment variable can be important for cron to ensure it runs at the
# "local" time you expect. If not set, it defaults to UTC in the container.
#
# The `PIHOLE_API_KEY` in the environment is passed to the script, which then uses it.
# The script's config.ini also has a pihole_api_key field.
# To avoid confusion, it's best to manage PIHOLE_API_KEY via environment for Docker.
# The script's load_configuration function has fallback=None for pihole_api_key from config.ini.
# Let's ensure the Python script gives precedence to an environment variable if set for PIHOLE_API_KEY,
# or consistently uses the one from config.ini which can be populated by the env var.
# Current script `load_configuration` reads it from config.ini.
# Let's stick to Pi-hole API key being in config.ini, which itself can be populated from env vars if using templating.
# For simplicity and security, MERAKI_API_KEY is ENV based. Pi-hole API key can be in config.ini.
# The docker-compose passes PIHOLE_API_KEY and PIHOLE_API_URL as ENV vars.
# The script should be updated to prefer these ENV vars if available, otherwise use config.ini.
#
# Re-evaluating:
# Meraki API Key: Must be ENV (`MERAKI_API_KEY`). Script already does this.
# Pi-hole URL: Configurable. `config.ini` is fine. `PIHOLE_API_URL` in compose.yml can set it in config.ini (if templated) or script reads from ENV.
# Pi-hole API Key: Configurable. `config.ini` is fine. `PIHOLE_API_KEY` in compose.yml can set it in config.ini (if templated) or script reads from ENV.
# CRON_SCHEDULE: ENV. Dockerfile sets default, compose can override. Script entrypoint uses it.
#
# The python script currently reads pihole_api_url and pihole_api_key from config.ini.
# To make the docker-compose env vars PIHOLE_API_URL and PIHOLE_API_KEY directly useful without config templating:
# The python script's `load_configuration` function should be modified to check for these env vars first.
#
# Let's modify the Python script (in a subsequent step or as part of this if minor)
# to prefer PIHOLE_API_URL and PIHOLE_API_KEY from environment if set,
# falling back to config.ini. This makes the docker-compose more straightforward.
#
# For now, this docker-compose.yml assumes that the config.ini in `./config_prod` is fully filled out,
# including Pi-hole details. The PIHOLE_API_URL and PIHOLE_API_KEY env vars are illustrative here
# but won't be used by the script *yet*.
# The provided PIHOLE_API_URL and PIHOLE_API_KEY env vars are for the user to know they need to configure these,
# and the recommended place is the config.ini file.
#
# The ./config_prod mount is good.
# The CRON_SCHEDULE env var is correctly used by the entrypoint.
# The MERAKI_API_KEY env var is correctly used by the script.
# TZ is a good addition.
#
# Final check on the volume mount:
# `- ./config_prod:/config:ro` means the `config_prod` directory on the host is mounted to `/config` in the container.
# The script looks for `/config/config.ini`. So the user must create `./config_prod/config.ini`.
# This is a common and good pattern.
#
# Added .env.example content as comments for clarity.
#
# The image name `meraki-pihole-sync:latest` is good.
# `build: .` tells compose to build from the Dockerfile in the current directory.
#
# This looks like a solid docker-compose.yml file.
#
# One final thought: the script's `sync_interval_seconds` in `config.ini` is not used when running via cron in Docker.
# This is fine, as cron schedule is controlled by `CRON_SCHEDULE`.
#
# The comments in the YAML are quite extensive for user guidance, which is good.
#
# I will also create the `.env.example` file mentioned.
